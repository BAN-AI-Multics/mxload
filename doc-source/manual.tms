.\" ---------------------------- PAGE FORMAT
.pl 10.5i
.nr PO 1.35i
.nr LL 6.00i
.nr FL 6.00i
.nr PD 0.8v
.nr PS 11
.nr VS 13
.\" ---------------------------- HEADERS AND FOOTERS
.ds CH
.ds LH
.ds RH
.ds CF
.ds LF \s8\(co 1988 Oxford Systems, Inc.  All Rights Reserved\s0
.ds RF
.\" ---------------------------- STRING DEFINITIONS
.ds Bd \fLbackup_dump\fP
.ds Mx Multics
.ds Md \s-1MS\s0\-\s-1DOS\s0
.ds Pd \s-1PC\s0\-\s-1DOS\s0
.ds Ux \s-1UNIX\s0
.ds Ml \fBmxload\fP
.ds Mm \fBmxmap\fP
.ds As \s-1ASCII\s0
.ds 9b 9\-bit binary
.ds 8b 8\-bit \*(As
.\" ---------------------------- CHANGE BAR MACROS
.de CS
.mc \s12\(br\s0
.. 
.de CE
.mc
.. 
.\" ---------------------------- TITLE PAGE
.\"
.LP
\|
.sp +11P
.ps 28
.vs 24
.ce 1
mxload
.\" ----------------
.sp 1.5P
.ft I
.ps 18
.nf
.ce 2
A Portable Package For
Reading Multics Backup Tapes
.\" ----------------
.sp 1.4i
.ft R
.ps 14
.ce 1
User's Manual
.ps 11
.sp
.ce 1
\*(Ml    Release 1.0
.sp 0.2v
.ce 1
1 December 1988
.\" ----------------
.\"
.\" ----------------------------------------------------------------
.\"
.bp
.ds CF - % -
.ds LF Oxford Systems, Inc. 
.ds RF Release 1.0:\ \ 88-12-01
.nr % 1
.\" ----------------
.SH
.ps +2
INTRODUCTION
.LP
.\" ----------------
.FS
UNIX is a registered trademark of AT&T Bell Laboratories. 
mxload is a trademark of Oxford Systems, Inc. 
Multics is a registered trademark of Honeywell Bull, Inc. 
MS-DOS  and PC-DOS are registered trademarks of Microsoft, Inc. 
SunOS is a trademark of Sun Microsystems, Inc. 
Sun-2 and Sun-3 are registered trademarks of Sun Microsystems, Inc. 
.FE
.\" ----------------
The \*(Ml package is a set of programs for interpreting data
from backup tapes created on a Honeywell \*(Mx system (using the \*(Mx \*(Bd
command) on a wide variety of target systems. 
Throughout this manual, \*Qthe \*(Ml package\*U refers to the entire
set of programs, whereas \*Q\*(Ml\*U alone refers to the
reloading program itself. 
The rest of this manual contains the following sections:
.\"
.nr PD 0.4v
.IP "Data Formats and Conversions" 2P
Describes how \*(Ml treats the data it reads from tape, how it converts
ASCII and binary files, and how it treats special \*(Mx data
formats (mailboxes, archives, Forum meetings).
.\"
.IP "Using the \*(Ml Package"
Describes the programs making up the package and how they are used.
Also describes naming conventions for reloaded data and the
format of the reload map.
.\"
.IP "Using the Standalone Utilities"
Describes the standalone programs for manipulating \*(Mx archives,
mailboxes, and Forum meetings.
.\"
.IP "Control File Syntax"
Describes the control file used to specify options, pathnames, and name
translations for batch-style use.
.\"
.IP "Installation"
Describes files and directories on the \*(Ml distribution tape and how
to install them.
.\"
.IP "Release Notes\ \ \ \ \ \ \ \ \ \ "
Miscellaneous notes on the current release of \*(Ml.
.nr PD 0.8v
.\"
.SH
Typographic Conventions
.LP
In the text of this manual, use of \fBbold\fP font identifies \*(Ux commands,
filenames, and, in general, any string interpreted or produced
literally by a target system.
The \fIitalic\fP font is used to indicate parameters which must be
replaced before use.
The \fLlisting\fP font (in the text) indicates a \*(Mx command,
subroutine, pathname, and, in general, any string interpreted or
produced literally by \*(Mx.
In examples (set off from the text), the \f(LBbold listing\fP font is
used for user input (to the target system, or, sometimes, to a \*(Mx
system).
When an example includes expected output, that is shown in \fLlisting\fP font.
.LP
Wherever possible, this manual does not assume any particular
target system. 
However, since many features (such as user ID translation) are
specific to \*(Ux systems, the SunOS version of \*(Ml is used
in all examples. 
When running on other (non-\*(Ux) systems, the commands may have
different syntax, file names may be different, etc.
.\"
.\"
.\" ----------------------------------------------------------------
.\"
.bp
.SH
.ps +2
DATA FORMATS AND CONVERSION
.LP
\*(Ml and its standalone utilities are primarily in the business of
converting from \*(Mx data formats to some form usable on the target
system. 
This involves both simple conversion from 9-bit \*(Mx bytes to 8-bit
bytes, and complex unpacking and conversion for special \*(Mx formats
such as archives and mailboxes. 
This section discusses the details of such conversion, but the actual
conversion specifications are described in \fIControl File Syntax\fP,
below. 
.\"
.SH
Data Formats
.LP
Because \*(Mx data is composed of 9\-bit bytes, and \*(Ml is designed
for systems using 8\-bit bytes, \*(Mx data must be converted to an
appropriate corresponding form as it is reloaded. 
For byte-oriented data, such as \*(As text, each \*(Mx
byte is converted to a corresponding byte in the new file; otherwise,
the conversion is bit-oriented. 
In addition, \*(Ml recognizes several special \*(Mx data formats (such
as mailboxes and archive segments) and, by default, converts
them automatically into an appropriate form when reloading. 
Statements in the \*(Ml control file can override any of the default
conversions. 
.LP
\*(Ml recognizes two basic formats for \*(Mx data: \*(9b and \*(8b\**. 
.FS
Strictly speaking, \*(8b data is not \*(As, since the \*(As character
set includes only those with values from 0 to 127 (decimal). 
However, it is a convenient term, and throughout the \*(Ml
documentation, the term \*QASCII\*U refers to \*(8b (byte-oriented)
data, and \*Qbinary\*U refers to \*(9b (bit-oriented) data. 
.FE
When reloading \*(Mx files (\*Qsegments\*U, in \*(Mx terminology),
\*(Ml examines the file's contents to determine which format is
appropriate. 
In general, if none of the 9\-bit bytes in the original \*(Mx data has
the high-order bit set, the data is treated as \*(8b, and the low
order 8 bits of each 9\-bit \*(Mx byte are reloaded into an 8\-bit
byte in the reloaded file. 
This is specified as \fB8bit\fP conversion. 
.LP
If the data is not \*(8b \*(As, it is treated as \*(9b: the 8 high-order
bits of the 
first \*(Mx byte are reloaded into the first byte of reloaded data;
the second byte of reloaded data has as its high order bit, the
low-order bit of the first \*(Mx byte, and as its 7 low-order
bits, the 7 high-order bits of the second \*(Mx byte, etc. 
This is a \*Qbig-endian\*U view of byte ordering, and converts each
string of 8 \*(Mx bytes into 9 8\-bit bytes. 
This is specified as \fB9bit\fP conversion. 
.LP
\*(9b conversion is best illustrated by the following diagram:
.LP
.ds t0 \s6\&2\u\s0\s4\&0\s0\s6\d\s0
.ds t1 \s6\&2\u\s0\s4\&1\s0\s6\d\s0
.ds t2 \s6\&2\u\s0\s4\&2\s0\s6\d\s0
.ds t3 \s6\&2\u\s0\s4\&3\s0\s6\d\s0
.ds t4 \s6\&2\u\s0\s4\&4\s0\s6\d\s0
.ds t5 \s6\&2\u\s0\s4\&5\s0\s6\d\s0
.ds t6 \s6\&2\u\s0\s4\&6\s0\s6\d\s0
.ds t7 \s6\&2\u\s0\s4\&7\s0\s6\d\s0
.ds t8 \s6\&2\u\s0\s4\&8\s0\s6\d\s0
.ds tS \h`15u`
.ds tA \*(t8\*(Ts\*(t7\*(Ts\*(t6\*(Ts\*(t5\*(Ts\*(t4\*(Ts\*(t3\*(Ts\*(t2\*(Ts\*(t1\*(Ts\*(t0
.ds tB \*(t7\*(Ts\*(t6\*(Ts\*(t5\*(Ts\*(t4\*(Ts\*(t3\*(Ts\*(t2\*(Ts\*(t1\*(Ts\*(t0
.ds b0 \s8Byte 0\s0
.ds b1 \s8Byte 1\s0
.ds b2 \s8Byte 2\s0
.ds b3 \s8Byte 3\s0
.ds b4 \s8Byte 4\s0
.ds b5 \s8Byte 5\s0
.ds b6 \s8Byte 6\s0
.ds b7 \s8Byte 7\s0
.ds b8 \s8Byte 8\s0
.ds El \ .\ .\ .\ 
.TS
box tab (/) center ;
c s s s s s s s
c0w(4.5P) | c0w(4.5P) | c0w(4.5P) | c0w(4.5P) | c0w(4.5P) | c0w(4.5P) | c0w(4.5P) | c0w(4.5P) . 
\*(Mx Data (Eight 9\-bit bytes)
_
\*(b0/\*(b1/\*(b2/\*(b3/\*(b4/\*(b5/\*(b6/\*(b7/\*(b8
\*(tA/\*(tA/\*(tA/\*(tA/\*(tA/\*(tA/\*(tA/\*(tA/\|
.TE
.sp -14p
.TS
box tab (/) center ;
c0w(4P) | c0w(4P) | c0w(4P) | c0w(4P) | c0w(4P) | c0w(4P) | c0w(4P) | c0w(4P) | c0w(4P)
c0w(4P) | c0w(4P) | c0w(4P) | c0w(4P) | c0w(4P) | c0w(4P) | c0w(4P) | c0w(4P) | c0w(4P)
c s s s s s s s s . 
\*(tB/\*(tB/\*(tB/\*(tB/\*(tB/\*(tB/\*(tB/\*(tB/\*(tB\|
\*(b0/\*(b1/\*(b2/\*(b3/\*(b4/\*(b5/\*(b6/\*(b7/\*(b8
_
Reloaded Data (Nine 8\-bit bytes)
.TE
.LP
In addition to being converted in this bit-oriented format, \*(9b data
can also be converted to \*(8b format by stripping the high-order bit
from every byte. 
This can be performed manually after a file has been reloaded (see the
\fBmxascii\fP manual page in the appendix)
or by an appropriate \fBconvert\fP statement in
the \*(Ml control file. 
This is specified as \fB8bit\fP conversion. 
.LP
The \*Qprimitive\*U conversion types are \fB8bit\fP, \fB9bit\fP,
\fB8bit+9bit\fP, and \fBdiscard\fP. 
The \fB8bit\fP conversion type converts byte by byte, discarding
high-order bits as needed. 
The \fB9bit\fP conversion type converts in bit-stream form, as above. 
The \fB8bit+9bit\fP conversion type produces two files for each \*(Mx
input file: one in \fB8bit\fP form, the other in \fB9bit\fP form,
distinguished by the suffixes \fB#8b\fP and \fB#9b\fP. 
.\"
.\" NOTE:  I don't think these names are right.... 
.\"
Finally, the \fBdiscard\fP conversion simply discards the \*(Mx data,
useful when it is clear that there will be no use for keeping it (such
as \*(Mx object segments). 
The \fBmxascii\fP standalone utility may be used to force \fB8bit\fP
conversion on a file reloaded as \fB9bit\fP; the opposite direction is
not possible, of course. 
.\"
.SH
Special Multics File Types
.LP
The following \*(Mx file formats are supported either by \*(Ml, by
the standalone utilities, or both:
archive segments, mailbox segments, and forum meetings.
\*(Mx multi-segment files and non-ASCII files may also be manipulated
after reloading.
.LP
In normal operation, \*(Ml automatically unpacks any archive files that
are entirely 8-bit ASCII into corresponding directories containing all
the archive's components but reloads
the other special formats, including archives with any components
requiring \fB9bit\fP conversion, as \fB9bit\fP data. 
Archives are unpacked recursively: if an archive component is itself
an archive, it, too, is turned into a directory and unpacked. 
.LP
When requested for \*(Ml,
or when performed standalone by \fBmxmbx\fP,
mailboxes are unpacked into a file or files containing the individual
mail messages.
Several options are available for this conversion; see \fBmxmbx\fP
for details.
When a mailbox is unpacked, special header lines are prefixed to each
message to indicate the original sender, access class, and time of the
message (i.e., the data from the \fLmseg_return_args\fP structure). 
For efficiency, \*(Ml by default simply reloads mailboxes as files and
requires that they be unpacked manually by \fBmxmbx\fP.
.LP
\*(Mx Forum meetings are reloaded as \*(Ux directories by \*(Ml, but
must be unpacked manually afterward.
This is necessary because a Forum meeting (or any multi-segment file)
may be split across two tapes, and \*(Ml has no way to determine that
the complete meeting has been reloaded.
Options similar to those for mailboxes are available for this
conversion; see \fBmxforum\fP (in the appendix) for details.
.LP
\*(Mx multi-segment files (MSFs) are also reloaded as \*(Ux directories
by \*(Ml, but no automatic processing is available.
An MSF created by \fLvfile_\fP in \fLstream_output\fP mode (such as by
\fLfile_output\fP or \fLcrossref\fP) can be turned into a \*(Ux file by
using the \fBcat\fP(1) command to concatenate its components.
.LP
A non-8bit file reloaded as \*(9b may be converted by stripping off the
high-order bit of each byte using the \fBmxascii\fP utility.
.\"
.\" ----------------------------------------------------------------
.\"
.bp
.SH
.ps +2
USING THE MXLOAD PACKAGE
.LP
There are three basic operations that can be performed by the
programs comprising the \*(Ml package:
reloading a tape, listing a tape's contents, and unpacking or
converting data already read from a tape. 
These operations
are performed by the following programs:
.in 1.5P
.\"
.IP "\*(Ml" 4.8P
Reload specified files and directories from a \*(Bd tape (or file image). 
.nr PD 0.3v
.\"
.IP "\*(Mm"
List the contents of a \*(Bd tape (or file image), optionally
displaying all \*(Mx segment and directory attributes, names, ACLs, etc. 
.\"
.IP "\fBmxarc\fP"
For a \*(Mx archive file already reloaded with \*(Ml, extract
components, list the contents, or unpack into an archive directory. 
.\"
.IP "\fBmxmbx\fP"
For a \*(Mx mailbox segment already reloaded with \*(Ml, unpack into a
file or files containing all the individual messages. 
.\"
.IP "\fBmxforum\fP"
Like \fBmxmbx\fP, but unpacks a \*(Mx Forum meeting (reloaded as a
directory and several files) into a file or files containing all the
transactions from the meeting. 
.\"
.IP "\fBmxascii\fP"
For a file already reloaded with \*(Ml, converts from 9-bit binary
format to 8-bit \*(As form. 
.\"
.\" .IP "\fBmxmsf\fP"
.\" Converts a \*(Mx multi-segment file (reloaded by \*(Ml as a directory
.\" and component files) into a single large file. 
.\" This works \fBonly\fP for \*(Mx stream \fLvfile_\fP files, not indexed
.\" \fLvfile_\fP files or other structured data. 
.\"
.nr PD 0.8v
.in -2P
.LP
The primary function of the \*(Ml package is reloading \*(Mx data, and
most of this section describes how \*(Ml itself is used. 
The next most important program is \*(Mm, which is described following
\*(Ml (see \fIReload Map Format\fP, below, and the \*(Mm manual page in
the appendix).
Finally, \fBmxarc\fP through \fBmxascii\fP are described as a group
(see \fIUsing the Standalone Utilities\fP, below).
.LP
Complete interface descriptions of each program are provided by the
UNIX-style manual pages in the appendix at the end of this manual.
The descriptions here are intended as examples and general guidance, not
as a complete reference.
.\"
.SH
Styles of Use
.LP
\*(Ml supports two different styles of use: interactive and batch. 
The \*Qinteractive\*U style, where \*(Ml is controlled primarily from
command line options, is intended for simple reloads of entire
subtrees, where the standard conversion defaults are satisfactory and
the user name conversion is not important. 
.LP
In the \*Qbatch\*U style, \*(Ml is controlled by statements in one or
more \*(Ml control files. 
This is intended for selective reloading, where an entire \*(Mx
hierarchy, containing data belonging to many users, is reloaded into
a corresponding hierarchy on the target machine. 
For batch operation, the control files can be used to specify
translations from \*(Mx identities to appropriate owners on the
target machine, and to select multiple subtrees (or individual files
or directories) for reloading into specific new locations. 
.LP
In both styles of \*(Ml (and \*(Mm) use, only one tape is processed at
a time. 
When a tape is finished, the \*(Ml command terminates; a new tape must
then be mounted, and the command issued again, if more data is to be
reloaded. 
Because \*(Ux systems lack a standard tape handling interface, it is not
possible for \*(Ml to handle multiple tapes itself.
Instead, this must be accomplished by invoking \*(Ml repeatedly.
.LP
By default, \*(Ml reads the entire tape looking for data to reload. 
The \fB\-f\fP option\**
.FS
NOTE: The \fB\-f\fP option is not supported in release 1.0.
.FE
may be used to cause \*(Ml to exit immediately after it has reloaded
the requested data, rather than looking for additional copies later on
the tape.
This option should be used when reloading specific objects from a tape,
rather than the tape's entire contents, as otherwise, \*(Ml will read
the tape through to the end looking for additional copies even after
satisfying the requests for reloading specific objects.
.LP
WARNING: \*(Ml is intended primarily for use on \*Qcomplete\*U \*(Bd
tapes.  Attempting to reload an \*Qincremental\*U or \*Qconsolidated\*U
tape will create multiple copies (with different names; see \fIReload
Name Translation\fP, below) of objects that appear more than once on the
tape.
.LP
By default, \*(Ml writes a map of everything reloaded to standard
output.  This map gives each object's \*(Mx pathname, its date/time
modified and date/time used, its size, its object type and \*(Ml
conversion type, and the \*(Ux pathname where the object is being
reloaded. 
If desired, this map can be directed to a different file or to files
in each reloaded directory, and the amount of information in the map
may be adjusted. 
.\"
.SH
Examples of \*(Ml's Interactive Style
.LP
In interactive style, the most common operation is to reload some
\*(Mx subtree into a new location in a \*(Ux file system. 
Some examples:
.QP
.ft LB
.ps -1
mxload /dev/rmt0 '>udd>ATMOS>Dillman' /usr/dillman
.LP
This will reload Ms.\ Dillman's \*(Mx hierarchy into a corresponding
\*(Ux directory (which is created if it does not already exist). 
All the file permissions will be set to the \*(Ux default (using the
\*(Ux process's \fBumask\fP(1) value), and all the files will be owned
by the process running \*(Ml (Ms.\ Dillman's, presumably). 
The \*(Mx data is read from the tape mounted on the \fBmt0\fP device
(as with most \*(Ux tape operations, the name of the \*Qraw\*U device
should be used). 
Note that in this, and all other examples, the \*(Mx pathname
\fBmust\fP be enclosed in quotes, because the \*Q>\*U characters are
special to the \*(Ux shell. 
.QP
.ft LB
.ps -1
mxload -g map1 /dev/rmt0 '>' . 
.LP
This will reload everything on the tape into directories under the
current working directory. 
One might do this to reload an entire tape, and then use \*(Ux
commands to redistribute the data it contains. 
Permissions and ownership will still have default values. 
The \fB\-g\fP option directs the reload map into the file called
\fBmap1\fP, also in the current working directory. 
.QP
.ft LB
.ps -1
mxload -n -c uid_list.mxl /dev/rmt0 '>user_dir_dir>ATMOS' /usr3
.LP
This would reload all the ATMOS project home directories into the
\fB/usr3\fP file system, and restore file ownership and permissions as
specified by the statements in the \*(Ml control file named
\fBuid_list.mxl\fP.
The \fB\-n\fP option suppresses generation of any maps. 
.QP
.ft LB
.ps -1
dd if=/dev/rmt0 of=tape_file bs=4680 files=50
.br
mxload -lx tape_file '>udd>TX1' /usr1 '>udd>TX2' /usr2
.LP
This example shows how to request multiple subtree reloads on a single
command line, and also illustrates how \*(Ml's input can come
from a file, rather than a physical tape. 
The \fBdd\fP(1) command is used first to copy the contents of the tape
into a file (see \fINotes on Using Disk Files\fP, below),
then \*(Ml is used to reload some \*(Mx subtrees from that file. 
The \fB\-lx\fP options cause \*(Ml to write map files in
each directory reloaded (\fB\-l\fP) and to include the \*QeXtremely
verbose\*U (\fB\-x\fP) information about all the \*(Mx attributes. 
.\"
.SH
Example of \*(Ml's Batch Style
.LP
The batch style is more difficult to illustrate, because the heart of the
matter is the contents of the control files, which are not shown here.
Several sample control files are included on the installation tape; see
\fIControl File Syntax\fP, below, for details of control file syntax.
This example illustrates the \*(Ml command syntax for batch style
operation:
.QP
.ft LB
.ps -1
mxload -c dir_list.mxl -c uid_list.mxl -g full_map -v
.LP
This assumes that a list of data to be reloaded is specified by
several \fBsubtree\fP (or \fBfile\fP or \fBdirectory\fP) statements in
the file \fBdir_list.mxl\fP.
It also assumes that \fBuid_list.mxl\fP contains a set of \fBowner\fP
and \fBgroup\fP statements for converting \*(Mx Person-IDs and
Project-IDs to \*(Ux owner and group IDs for the files being reloaded.
The \fB-g\fP and \fB-v\fP options are used to create a verbose map in
the working directory.
.LP
This example illustrates the case where a large \*(Mx hierarchy is
being reloaded wholesale into a \*(Ux system, with individual person
and project directories being redistributed to new homes in the \*(Ux
file system.
Typically, the \fBdir_list.mxl\fP file would be set up by making a map
of the tape (with \*(Mm, or by looking at the original \*(Mx \*(Bd
map), planning the new \*(Ux file system organization in advance, and
then reloading data from all the tapes from a complete \*(Bd of the
\*(Mx file system.
Actually, the command line in the example would be issued many times,
once for each tape to be reloaded, and each time, it would reload
more data and append to the map.
.\"
.SH
Reload Name Translation
.LP
On some target systems, the maximum length or permitted character set
for filenames is insufficient to represent \*(Mx names.
In these cases, characters must be translated and names shortened.
The supported name types are described in the following table
(these are all keywords for the \fBname_type\fP statement in an \*(Ml
control file; see
\fIOption Statements\fP, below):
.\"
.IP "\fBBSD\fP" 4P
This applies to SunOS and 4.2/4.3 BSD \*(Ux systems.
These have practical length limitations (individual names of up to 256
characters are permitted).
To accommodate the deficiencies of \*(Ux shells in handling special
characters, both single quotes (\fL'\fP) and double quotes (\fL"\fP)
are translated to hyphens (\fL-\fP).
Because slash (\fL/\fP) is used as the \*(Ux pathname separator, it,
too, is translated to a hyphen (\fL-\fP).
Greater-thans (\fL>\fP) in \*(Mx pathnames are (implicitly)
translated to slash (\fL/\fP) in \*(Ux pathnames.
Null characters in \*(Mx names (a rarity) are also translated to
hyphens (\fL-\fP).
All other characters are left unchanged in \*(Ux pathnames.
.\"
.IP "\fBSysV\fP"
This applies to System\ V \*(Ux systems.
All the same translations are made as for \fBBSD\fP, but an additional
limitation of 14 characters maximum name length is applied.
A \*(Mx name longer than 14 characters is truncated (first) to 14
characters.  If this results in a conflict with any existing file, it
is then trimmed to 12 characters, and each of the numeric suffixes
\fB#0\fP to \fB#9\fP is applied, until one results in a name that
does not conflict with any existing files.
If that attempt is unsuccessful, another character is trimmed from the
\*(Mx name, the suffixes \fB#10\fP to \fB#99\fP are tried, and so forth.
.\"
.IP "\fBMSDOS\fP"
This applies to PC-compatible systems running \*(Md or \*(Pd (version
2.0 or later).
The restrictions here are much more stringent: an 8-character name plus
a 3-character extension.
The first and last components of the \*(Mx name are used (if there
is only one, the \*(Md name has no extension).
If a name duplication occurs, the numeric suffixing described above for
\fBSysV\fP is done on the first name component (which is first
truncated to 8 characters, then to 6, then 5, etc.).
\*(Mx names are also translated to upper case to become \*(Md
names, and all characters except letters, digits, dashes, and some
others are translated to hyphens.
.\"
.\" NOTE: Find out for real what the MS-DOS name restrictions are
.\"
.IP "\fBCMS\fP"
This applies to systems running IBM VM/CMS.
These restrictions are very similar to the \*(Md restrictions, except
that the extension is 8 characters instead of only 3.
VM/CMS reloads must specify the \fBreload flat;\fP statement, since
no directories are available.
.\"
.LP
Ordinarily, \*(Ml is compiled with the appropriate value for the
option for name conversion, and the \fBname_type\fP statement need
never be used.  If \fBname_type\fP is used on a system that cannot
support the resulting type of names, the results will be surprising.
.\"
.SH
Reloading Directories
.LP
There are two important ways in which the reloading process differs
from a \*(Mx \fLbackup_load\fP operation:
what gets reloaded, and how names are translated during the reload.
For the most part, these differences are invisible, but some
possible problems are described below.
.LP
A \*(Mx \*(Bd tape contains some records describing directories and
other records describing segments.  Each segment and directory on the
tape is identified by its full \*(Mx pathname, with all parent
directories back to the root of the dump identified by primary name.
If the \*(Bd tape is from a complete dump, the root of the dump is
usually the real root directory.
If, however, the tape was created by an explicit \*(Bd command that
specified a pathname, the root of the dump is the pathname that was
specified to the command.
.LP
It is important to understand how data is stored and named on a \*(Bd
tape because \*(Ml only understands the pathnames stored with the
segments themselves.
Although the \*(Mx \fLretrieve\fP command can, in some circumstances,
handle pathname components that are not primary names of directories (by
reference to the \*(Ms hierarchy or by reading directory records from
the tape), no such capability is provided in \*(Ml.
If a segment or subtree is specified by name for reloading by \*(Ml, the
name specified must match the name on the tape, which generally means it
must consist entirely of primary names.
If there is any question about pathnames on a tape, \*(Mm can be used
to display them.
.LP
The other important difference between \*(Ml and the \*(Mx
\fLretrieve\fP command is that \*(Ml does not reload directories.
Although there are records on the tape for \*(Mx directories, \*(Ml
ignores them, and instead creates directories on the target system as
needed; that is, whenever a pathname on the tape includes a directory
that does not (yet) exist on the target system.
Only \*(Mx segments are actually reloaded from the tape.
Neither directories nor links are reloaded from the tape.
.\"
.\" 89-01-12: This appears to be untrue; no lists are getting produced!
.\" 
.\" Directories are not reloaded, although
.\" Directory records from the tape are processed to produce lists of
.\" links and added names (see the \fBList\fP statement for details).
.\" Links are not reloaded, either, although they can be listed in a
.\" separate file if requested.
.\"
.LP
The effect of this is that directories are created on the target system
only as needed, with their names appropriately translated from the \*(Mx
pathnames.
If a directory already exists on the target system, it will be used,
and its attributes (permissions, ownership, etc.) will remain unchanged.
If a directory does not exist, it will be created the first time it is
needed for reloading a segment.
When a directory is created like this, its access attributes (permissions,
ownership) will be set the same as those of the file being created,
not to the directory's attributes on the dump tape.
The newly-created directory's access and modification times are never set
explicitly, but are simply the time it is accessed or modified during
the reload. 
.\"
.SH
Reloading Directories: Access Control Problems
.LP
Ordinarily, this directory creation algorithm generates the desired
results, but it will occasionally cause incorrect ownership or
permissions to be set.
These problems are serious only when (A) \*(Ml is being run by
super-user, and (B) \*(Ml is performing translations from \*(Mx
person and project names to user and group IDs on the target system.
.LP
Because a directory's attributes are taken from the first object that
causes it to be created, a directory containing segments belonging
to several users may have incorrect permissions or ownership set.
The same incorrect setting may occur for parent directories further up
in the hierarchy; for instance, if \*(Ml is reloading from the root
(\fL>\fP) and the first item on the tape is several levels down in
\fL>udd>INCO>Jenkins\fP, all the directories created on the target
system (\fBudd\fP, \fBINCO\fP, \fBJenkins\fP) will be created as if
owned by Jenkins, rather than with the attributes they had on the \*(Mx
system.  This may result in unintentional granting access to directories
created during a reload; however, since \*(Ux access control depends on
the object's permission bits alone, this will not grant excessive access
to reloaded objects.  The only unintentional access that may occur is
such objects may be deleted.  If this is a problem, the top-level \*(Ux
directory for the reload should be protected against unintended access
by manually restricting its permissions before the reload,
thus cutting off access to anything below it.
.\"
.SH
Reloading Directories: Name Problems
.LP
The other problem that the directory creation algorithm causes is in
name conflicts.
This occurs when the target system has short or restricted names (and
thus is not a problem for systems with \fBBSD\fP name translation).
Because directories on the target system are used if they already
exist, with no conflict handling, two different \*(Mx directory names
(such as \fLvery_long_name_1\fP and \fLvery_long_name_2\fP) that
translate to the same target name (such as \fLvery_long_name\fP on
systems with \fBSysV\fP name translation, which are restricted to 14-character
names) will refer to the same directory on the target system.
The effect of this is that segments from the two different \*(Mx
directories will be reloaded into the same directory on the target
system; if the segments have the same names, the usual name conflict
handling will be used to make them different.
.LP
This usually isn't a problem, because such name limitations have to be
dealt with throughout the reload.
Unfortunately, there is no way for \*(Ml to detect automatically when
this happens, although it will be evident from examining the reload map.
.LP
The underlying cause of this is that \*(Ml processes \*(Bd tapes one at
a time, whereas \*(Mx processes them as a set.
Thus, when \*(Ml starts reading a new tape, it knows nothing about what
has been reloaded already, and it can't tell whether a directory name
conflict is caused by an actual conflict, or simply results from the
directory already having been reloaded from a previous tape.
.LP
WARNING: On \*(Ux and \*(Md systems, a \*(Mx directory named
\*Q\fL.\fP\*U or \*Q\fL..\fP\*U will have its contents loaded into the
current (or parent) \*(Ux directory from which the \*(Ml command was
issued, rather than creating a new directory.
This results from the special interpretation placed on those names by
\*(Ux and \*(Md.
A \*(Mx segment with one of those names will not be affected, as it will
be treated as an ordinary name conflict and be given a new name.
.\"
.SH
Reload Map Format
.LP
The \*(Ml and \*(Mm programs can generate a map showing the contents
of a tape.  Two options, \fB\-v\fP and \fB\-x\fP, control the amount
of information written to the map.
.LP
The \*(Mm program always produces a map, writing it to standard output.
.LP
The \*(Ml program produces a map unless requested otherwise by the
\fB\-n\fP command line option.
By default, the map is directed to standard output.
The \fB\-g\fP option may be used to direct the entire map to a specific file, and
the \fB\-l\fP option may be used to write the map into a set of local
map files named \fBmxload.map\fP, one for each directory reloaded, in the
each reloaded directory.
.LP
By default, the map is produced in a short form that lists each reloaded
object on a single line, beginning with a single space, containing the
object's \fBoriginal\fP \*(Mx entry name, its length in \*(Mx pages
(4K byte units), its 
type (\s-1\fBSEG\fP\s0, \s-1\fBDIR\fP\s0, or \s-1\fBLINK\fP\s0),
its \*(Mx date-time-contents-modified, and
its \*(Mx date-time-used.  An object line will be preceded by a line giving
the absolute pathname of its parent directory if the object has a different
parent than the previous object in the map.  The parent directory lines start
in the first column, and thus begin with ">" rather than a space.  Optionally
an object's line may be followed by additional lines (each beginning with two
or more spaces) giving details about the object's attributes.
.LP
Two options control the amount of information in the \*(Ml map.
The \fB\-v\fP (\*QVerbose\*U) option produces the following
information, in addition to the default described above:
.DS
the object's additional names on Multics;	
the full UNIX pathname into which the object was reloaded;
the conversion technique used to reload the object (see \fIData Formats and Conversion\fP, above)
the UNIX permissions, owning user ID, and owning group ID;
the object's Multics author and bit count author;
the object's Multics bit count and length in K bytes; and
the object's Multics ACL.
.DE
Note that \*(Mm listings do not include the UNIX pathname, the
conversion technique, or the UNIX permissions, user ID, or group ID.
.LP
The \fB\-x\fP (\*QeXtremely verbose\*U) produces the following
information in addition to that produced by a \fB\-v\fP listing:
.DS
the object's Multics date-time branch modified;
the object's Multics safety switch;
the object's Multics current length and records used;	
the object's Multics unique ID, in octal;
the object's Multics ring brackets; 
the object's Multics access class, in octal, and,
in the object's Multics ACL listing, the binary form of the extended access modes.
.DE
The access class is normally listed as "L:CCCCCC", where each character is an
octal digit.
L\ represents the security level (from 0 to 7) and CCCCCC is a
six-digit representation of the Multics categories.  If the access class for
the object has non-zero bits outside the 21 normally used, the entire 72-bit
access class is displayed in octal, following the L:CCCCCC value.  If the
access class is all zeros, it is not included in the listing.
.LP
The extended access modes for an object are displayed following the name in
each ACL term, in parentheses.  Only the significant non-zero bits of an
extended access mode are shown.
.\"
.\" ----------------------------------------------------------------
.\"
.bp
.SH
.ps +2
USING THE STANDALONE UTILITIES
.LP
Three major standalone utilities are provided as part of the \*(Ml
package for handling complex \*(Mx objects:
\fBmxarc\fP for \*(Mx archive segments,
\fBmxmbx\fP for \*(Mx mailboxes,
and \fBmxforum\fP for \*(Mx Forum meetings.
All of these perform the same basic unpacking functions.
A fourth, \fBmxascii\fP, is used for forcing \*(8b conversion after a
file has been reloaded in \*(9b format.
.\"
.SH
Complex Object Conversions
.LP
Four basic operations are available for complex objects:
.\"
.IP "\fB\ \ \-t\ \ \ \ \ \fP(table)" 7P
Generate a table of contents for the object.
.\"
.IP "\fB\ \ \-u\ \ \ \fP(unpack)"
Replace the reloaded object (file or directory) with a directory
containing one file for each of the object's components (or messages, or
transactions).
.\"
.IP "\fB\ \ \-r\ \ \ \ \fP(repack)"
Extract the object's contents and re-pack them into a single file
(\fBmxmbx\fP and \fBmxforum\fP only).
.\"
.IP "\fB\ \ \-x\ \ \ \ \fP(extract)"
Extract contents of the object into the current directory. For
archives, individual components can be extracted.
.LP
By default, \*(Ml does not perform any automatic conversion of complex
objects except wholly ASCII archives.  It cannot do so for Forum
meetings (because they may be split across multiple tapes, and therefore
\*(Ml can't always recognize them). 
For the other objects, the reason is efficiency: it is always possible
to perform the conversion manually afterward, and \*(Ml's goal is to get
the data off the tape rather than to process it completely.
For archives and mailboxes, the default can be overridden by the
\fBconvert\fP statement in a control file.
.LP
The \fBtable\fP operation is useful for perusing an object's contents
interactively, often prior to an \fBextract\fP operation.
This is probably more useful for archives than anything else.
.LP
The \fBunpack\fP operation, which replaces the reloaded object with its
closest \*(Ux equivalent, is used primarily for large-scale conversions.
Because it creates individual files for each item in the object, its
output is most flexible, but least efficient.
As with any operation involving a large number of files, it may be very
expensive to extract 1000 messages from a large mailbox.
.LP
The \fBrepack\fP operation, which creates a single file containing the
object's contents, is more efficient, but may be less flexible.
The single file it creates can be processed with \fBsed\fP(1) or editor
macros to convert, say, a \*(Mx mailbox's contents into a \*(Ux mail
file.
.\"
.\" ----------------------------------------------------------------
.\"
.bp
.SH
.ps +2
CONTROL FILE SYNTAX
.LP
Control files determine how \*(Ml loads data from the tape.
Statements in the control files specify loading options and identify
objects to be reloaded.
When multiple control files are used, they are processed in sequence,
so that a control file of static defaults (such as conversion options
and ownership translations) may be combined with a control file
created to list specific objects for reloading.
.\"
.SH
Defaults and Control File Order
.LP
Actually, the \*(Ml defaults and the command line options for naming
subtrees may be thought of as \*Qvirtual\*U control files, processed
in combination with the explicitly specified (using \fB\-c\fP) files,
as follows:
.\"
.IP "\*(Ml defaults"
The control file representation of these defaults is shown below.
These are processed first by \*(Ml, and may be modified by options in
other control files or command line options.
The default options do not specify any objects to be reloaded.
.\"
.IP "Explicit Control Files (\fB\-c\fP option)"
Zero or more control files may be specified on the \*(Ml command line.
If none are specified, the defaults apply.
Objects to be reloaded may either be specified here or as command line
pathnames, but at least one object must be specified by a control file
or a command line pathname.
.\"
.IP "Command Line Pathnames"
Pairs of \fI\*(Mx-Path\fP and \fI\*(Ux-Path\fP arguments may be specified
on the command line.
In effect, these are translated into \fBsubtree\fP and \fPnew_path\fP
statements in a virtual control file that is processed after the
defaults and the explicitly specified control files.
Only entire subtrees may be reloaded this way.
Because the \fI\*(Mx-Path\fP member of the pair contains \*Q>\*U
characters, it \fBmust\fP be enclosed in quotes on a \*(Ux system.
.\"
.SH
Statement Syntax
.LP
Statements consist of a keyword and zero or more operands, terminated
by a semicolon.
The keyword and operands are separated from each other by whitespace
(space, tab, newline).
Blank lines and other whitespace between statements is ignored.
Comments may be interspersed anywhere whitespace is permitted using
the PL/I syntax (beginning with \fL/*\fP and ending with \fL*/\fP).
.\"
.\"  NOTE:  TO BE SUPPLIED:  Do comments nest, or does one terminator
.\"    terminate all pending comments?
.\"
.LP
There are two classes of statements: \fIobject statements\fP and
\fIoption statements\fP.
An \fIobject statement\fP identifies a specific object to be reloaded:
a file, directory, or entire subtree.
An \fIoption statement\fP affects how objects are reloaded.
.LP
There are two types of option statements, distinguished by the
case of the keyword in the statement.
An option statement whose keyword begins with an upper case
letter specifies a default for all the reloads done with this control
file.
An option statement with a lower case keyword specifies an
option affecting only the previous object statement.
All default option statements must appear before \fBany\fP
object statements, and the keywords of object statements
must all be lower case.
An object statement may be followed by any number of option
statements modifying it, though usually only a conversion type is
important (in addition to the \fBnew_path\fP statement, which is
required).
.\"
.SH
Object Statements
.LP
There are three object statements
(\fBsubtree\fP, \fBfile\fP, and \fBdirectory\fP)
identifying objects to be reloaded,
and one mandatory option statement (\fBnew_path\fP)
which must follow each object statement.
Each of the three object statements must be followed by 
a \fBnew_path\fP statement that identifies a \*(Ux (or other native
system) pathname where the object is to be reloaded.
These are illustrated below.
Keywords are in \fBbold\fP and operands are in \fIitalics\fP.
.\"
.IP "\fBsubtree\fP   \fI\*(Mx-Directory\fP\0\fB;\fP"      2P
The \fBsubtree\fP statement specifies that \fI\*(Mx-Directory\fP, plus all the
files and directories below it, be reloaded.
New \*(Ux directories will be created (unless the reload type is
\fBflat\fP, see \fIOption Statements\fP, below) corresponding to each \*(Mx directory.
.\"
.IP "\fBfile\fP   \fI\*(Mx-File-Name\fP\0\fB;\fP"
The \fBfile\fP statement specifies that a \fI\*(Mx-File-Name\fP be
reloaded at the designated location.
This is useful for picking individual items from a tape.
.\"
.IP "\fBdirectory\fP   \fI\*(Mx-Pathname\fP\0\fB;\fP"
The \fBdirectory\fP statement specifies
that a \fI\*(Mx-Directory\fP and the files it contains, but not any
subordinate directories, be reloaded at the designated location.
This is distinct from the \fBsubtree\fP statement, and is primarily
useful when reloading a complete subtree with some exceptions: the
\fBsubtree\fP is specified normally, followed by several
\fBdirectory\fP statements with \fPconversion\ discard\|;\fP statements.
.\"
.IP "\fBnew_path\fP   \fI\*(Ux-Pathname\fP\0\fB;\fP"
This is properly an option statement, modifying the previous object
statement.
It specifies that the object be reloaded at \fI\*(Ux-Pathname\fP.
If \fBnew_path\fP is not specified, it is equivalent
to \fBnew_path\0.\0;\fP (that is, the object will be reloaded into the
current working directory).
.\"
.LP
If an object is matched by more than one type of statement (e.g., it
is named explicitly by a \fBfile\fP statement, but in a hierarchy
specified by a \fBsubtree\fP statement), the options for the
\fBfile\fP statement take precedence over any options in the
\fBsubtree\fP statement.
A \fBfile\fP statement takes precedence over a \fBdirectory\fP
statement, which takes precedence over a \fBsubtree\fP statement.
.\"
.SH
Option Statements
.LP
The following option statements are permitted.  Each is shown first in
its default form (that is, the form in which it appears in the virtual
control file representing \*(Ml's defaults), followed by its other
forms.
Keywords are in \fBbold\fP (and the first in the list is
always in caps, since it represents a default), and operands are in
\fIitalics\fP.
.\"
.\" .KS (This screws up the footnote, alas)
.bp
.IP "\fBConvert\fP   \fIfile-type conversion\fP\fB\0;\fP"
This specifies how \*(Mx segments of a particular \fIfile-type\fP
are to be converted on reloading.
These conversions are described in detail above (see \fIData Formats and
Conversions\fP, above).
This table identifies the valid conversions for each type.
.ta .5i 2.0i
.nf
.sp 0..3v
	File Type	Conversion Types
.sp 0.3v
	ascii	\fB8bit\fP, \fBdiscard\fP
	nonascii	\fB9bit\fP, \fB8bit\fP, \fB8bit+9bit\fP, \fBdiscard\fP
	ascii_archive	\fB8bit\fP, \fBunpack\fP, \fBdiscard\fP
	nonascii_archive	\fB9bit\fP, \fB8bit\fP, \fB8bit+9bit\fP, \fBunpack\fP, \fBdiscard\fP
	mbx	\fB9bit\fP, \fBunpack\fP, \fBdiscard\fP\**
	ms	\fBdiscard\fP, \fB9bit\fP, \fBunpack\fP
	object	\fBdiscard\fP, \fB9bit\fP
.fi
.FS
Actually, \fB8bit\fP and \fB8bit+9bit\fP conversion can be specified
for \fBmbx\fP, \fBms\fP, and \fBobject\fP files, but such conversions
are almost entirely useless.
.FE
.\" .KE
.\"
.sp 0.8v
.IP "\fBForce_convert\ \ \ 8bit\|;\fP"
.nr PD 0
.IP "\fBforce_convert\ \ \ \ 9bit\|;\fP"
.IP "\fBforce_convert\ \ \ \ 8bit+9bit\|;\fP"
.IP "\fBforce_convert\ \ \ \ discard\|;\fP"
.nr PD 0.8v
Specifies that, regardless of any per-file type conversions specified
by a \fBConvert\fP (or \fBconvert\fP) statement, newly created
\*(Ux files are to be created according to this specification.
This can be used, for instance, to force conversion of all components
of an archive as \fB8bit\fP, even if that means discarding information
from some of them.
.\"
.IP "\fBList\fP\ \ \ \fIlist-name\fP  \fBnone\|;\fP"
.nr PD 0
.IP "\fBlist\fP\ \ \ \ \fIlist-name\fP  \fBglobal\|;\fP"
.IP "\fBlist\fP\ \ \ \ \fIlist-name\fP  \fBlocal\|;\fP"
.nr PD 0.8v
Specifies where the lists of
added names (if \fIlist-name\fP is \fBaddname\fP),
links and link targets (if \fIlist-name\fP is \fBlink\fP),
and access control lists (if \fIlist-name\fP is \fBacl\fP)
are written.
The default (\fBnone\fP) is not to create them at all; \fBglobal\fP
causes them to be created in the working directory of the process
running \*(Ml, and \fBlocal\fP causes a separate list to be created in
each directory reloaded, describing the contents of that directory
alone.
Multiple \fBlist\fP statements may be specified, one for each of the
three valid \fIlist-name\fP values.
.\"
.IP "\fBPerson   (other)   (process)\|;\fP"
.nr PD 0
.IP "\fBperson   (other)   \fIuid\|/\^username\fP\fB\0;\fP"
.IP "\fBperson\fP   \fIPerson-ID\fP   \fB(process)\|;\fP"
.IP "\fBperson\fP   \fIPerson-ID   uid\|/\^username\fP\fB\0;\fP"
.nr PD 0.8v
Specifies how to translate the \*(Mx \*Qownership\*U of a file to the
appropriate \*(Ux owner attribute.
The keyword \fB(other)\fP (the parentheses are part of the keyword, to
distinguish it from a name) indicates conversion for any names not
explicitly specified by a \fBperson\fP statement with a \fIPerson-ID\fP
operand.
The \fB(process)\fP keyword specifies that the user owning the
process running \*(Ml should end up as the owner of reloaded objects;
by default, all objects are treated this way.
Otherwise, the \fIuid/username\fP form may be used to specify a
particular numeric user ID or name.
Although shown here in both its default-setting and per-object form, it
will be very rare for the \fBPerson\fP (or \fBProject\fP) statement to
be used except in a long list of translations to be used in setting
defaults for large reloads.
Access restrictions on the target system will usually require that \*(Ml
be run by the super-user in order to set the owner to a specific user ID
other than \fB(process)\fP.
.\"
.IP "\fBProject   (other)   (process)\|;\fP"
.nr PD 0
.IP "\fBproject   (other)   \fIgid\|/\^groupname\fP\fB\0;\fP"
.IP "\fBproject\fP   \fIProject-ID\fP   \fB(process)\|;\fP"
.IP "\fBproject\fP   \fIProject-ID   gid\|/\^groupname\fP\fB\0;\fP"
.nr PD 0.8v
This is equivalent to the \fBperson\fP statement, except that it relates
\*(Mx \fIProject-IDs\fP to \*(Ux group IDs.
Access restrictions on the target system will usually require that \*(Ml
be run by the super-user in order to set the owning group to a specific
group ID other than \fB(process)\fP, although this may be less
restricted than setting the owner.
.\"
.IP "\fBReload   hierarchical\|;\fP"
.nr PD 0
.IP "\fBreload   flat\|;\fP"
.nr PD 0.8v
A \fBhierarchical\fP reload creates directories when reloading a
subtree.
A \fBflat\fP reload reloads all files from a subtree in the directory
specified by \fBnew_path\fP, \*Qflattening\*U the reload and
collecting all the files together.  This is most useful for target
systems with serious name restrictions, or lacking a hierarchical file
system.
.\"
.IP "\fBAccess   acl\|;\fP"
.nr PD 0
.IP "\fBaccess   default\|;\fP"
.nr PD 0.8v
The \*(Ux permission bits for reloaded files are, by default, set to a
value derived from the file's \*(Mx Access Control List.
.\"
.\"  NOTE:  TO BE SUPPLIED: Description of algorithm
.\"
If the \fBdefault\fP keyword is specified (instead of \fBacl\fP), then
the process's \*(Ux default (the \fIumask\fP) is used instead.
.\"
.IP "\fBAccess_time   dtu\|;\fP"
.nr PD 0
.IP "\fBaccess_time   now\|;\fP"
.nr PD 0.8v
The default (\fBdtu\fP) specifies that the time-last-accessed of files
will be set to the \*(Mx date/time used.
Otherwise, (\fBnow\fP), no explicit action will be taken and the
current time will be used.
.\"
.IP "\fBModification_time   dtcm\|;\fP"
.nr PD 0
.IP "\fBmodification_time   now\|;\fP"
.nr PD 0.8v
The default (\fBdtcm\fP) specifies that the time-last-modified of files
will be set to the \*(Mx date/time contents modified.
Otherwise, (\fBnow\fP), no explicit action will be taken and the
current time will be used.
.\"
.\" .IP "\fBOwner   process\|;\fP"
.IP "\fBOwner   author\|;\fP"
.nr PD 0
.IP "\fBowner   bit_count_author\|;\fP"
.nr PD 0.8v
This specifies which \*(Mx segment attribute, author or bit count
author, id used to determine the \*(Ux file's owner.
The \*(Mx Person-ID from the author (or bit count author) is translated
according to the rules specified by the \fBPerson\fP statements, and
is set on the reloaded files.
If no explicit owner (or group) setting is desired, which is the
default, an appropriate \fBPerson: (other) (process)\|;\fP statement
should be used.
It will be rare for the \fBOwner\fP or \fBGroup\fP statement to be
used other than to specify a default.
.\"
.\" .IP "\fBGroup   process\|;\fP"
.IP "\fBGroup   author\|;\fP"
.nr PD 0
.IP "\fBgroup   bit_count_author\|;\fP"
.nr PD 0.8v
This specifies how the \*(Ux file's owning group is set, like the
\fBowner\fP statement.
The \*(Mx Project-ID is translated to a \*(Ux group ID by the rules
from the \fBProject\fP statements.
.\"
.IP "\fBDataend   bitcount\|;\fP"
.nr PD 0
.IP "\fBdataend   page_boundary\|;\fP"
.nr PD 0.8v
Specifies how the length of a reloaded object is determined.  The
default, \fBbitcount\fP uses the \*(Mx bitcount, and should be
appropriate in almost all circumstances.
This statement will rarely be used.
.\"
.IP "\fBName_type   BSD\|;\fP"
.nr PD 0
.IP "\fBname_type   SysV\|;\fP"
.IP "\fBname_type   MSDOS\|;\fP"
.IP "\fBname_type   CMS\|;\fP"
.nr PD 0.8v
This specifies the type of name conversion to be performed.
Ordinarily, this is useful only for testing, as the correct
name conversion is usually compiled into the program.
For a detailed description, see \fIReload Name Translation\fP, above.
This statement will rarely be used.
.\"
.\" ----------------------------------------------------------------
.\"
.\" .bp
.\" .SH
.\" .ps +2
.\" MXLOAD ON NON-\*(Ux SYSTEMS
.\" .LP
.\" NOTE:  To be supplied.
.\" .LP
.\" ABSTRACT: A brief discussion of \*(Ml's internal operation and hints
.\" for porting.
.\"
.\" ----------------------------------------------------------------
.\"
.\"
.bp
.SH
.ps +2
INSTALLATION
.LP
The distribution tape (or diskette) contains four directories:
.\"
.IP "\fBsource\fP" 4P
Contains all the source and header files, and a \*(Ux \fBmakefile\fP for 
compiling them.  Note that all the names are lower-case, including
\fBmakefile\fP.
.\"
.IP "\fBinfo\fP"
Contains a copy of the source (\fBtroff \-man\fP) for the manual pages
and for this manual (format with \fBtbl | troff -ms\fP).
.\"
.IP "\fBmisc\fP"
Contains a handful of test cases, some of which are obsolete or
uninteresting; these are primarily useful as a go/no-go test of the
parser.
.\"
.IP "\fBsun3\fP"
If you ordered a Sun-3 binary distribution, this contains a set of Sun-3
binaries for SunOS release 4.0.  For other releases, just recompile.
.\"
.LP
Distribution tapes are in \fBtar\fP format, written by SunOS
release 4.0.  Distribution diskettes are in \*(Md format.
.\"
.SH
UNIX Installation
.LP
On a \*(Ux system, installation is very simple: reload the tape,
\fBcd\fP to the \fBsrc\fP directory, update the \fBmakefile\fP
appropriately, and type \fBmake\fP.
The default target is System\ V, Release 3; one of \fBBSD\fP,
\fBSVR2\fP, or \fBGOULD\fP should be defined in the \fBmakefile\fP to
change that.
On a Sun system, \*(Ml will automatically be compiled correctly because
the compiler defines the symbol \fBsun\fP, which implies \fBBSD\fP.
.LP
The \fBmake\fP will create \fBmxload\fP, \fBmxmap\fP, \fBmxarc\fP, \fBmxmbx\fP,
\fBmxforum\fP, and \fBmxascii\fP, which can then be installed in a
local binary directory.
No special permissions or ownership are required.
.LP
If problems occur, we expect they will be straightforward to solve.
Feel free to call Oxford Systems, Inc. for assistance in porting
(617-646-8619).
.\"
.SH
Non-UNIX Installation
.LP
On a non-\*(Ux system, it's much harder.  Some special handling is
already provided for names, as is the flat reload option, but those are
only the tip of the iceberg.
Character set conversions (i.e., \s-1EBCDIC\s0) are not provided for,
and \*(Ml's use of the C\ library functions may be too extensive for
some systems.
The C\ library usage is, however, much more conservative in this release
than in the earlier beta-test versions.
.LP
Versions of \*(Ml for \*(Md and IBM VM/CMS have been created, though
with some degree of functional impairment when compared to the UNIX
version.
.\"
.\" ----------------------------------------------------------------
.\"
.bp
.SH
.ps +2
RELEASE NOTES
.QP
.ft I
These notes apply to the December 1988 release (1.0) of \*(Ml, and may
change in future releases.
.\"
.SH
Notes on Efficiency
.LP
\*(Ml is faster, on \*(Ux systems at least, when its temporary files
are in the same file system as the data being reloaded: the temporary
files are \fBrename\fP()'d into place.
The environment variable \fB\s-1TMP\s0\fP may be set to indicate an
alternative directory, as temporary files are normally placed in
\fB/tmp\fP.
This is true of all the programs in the \*(Ml package (except \*(Mm),
not just \*(Ml itself.
.LP
On some systems, tape I/O is hideously slow.
This is particularly true of streaming tape drives, because \*(Ml has to
do so much processing for the 9-bit/8-bit conversion in between reads
that it usually can't keep a tape streaming.
If this is a problem, it's best to copy the tape to disk first (see
\fINotes on Using Disk Files\fP, below).
It may also be possible to use \fBdd\fP(1) with extremely large block
sizes to achieve better buffering, but no experimentation has been done
along those lines.
.\"
.SH
Notes on Error Handling
.LP
\*(Ml is not particularly good about handling tape I/O errors. 
This results mostly from the general inadequacy of \*(Ux tape device
drivers, but also from the many different (and incompatible) drivers on
different systems.
All \*(Ml does is try to skip bad blocks, and gives up completely after
more than 10 tape errors.
If you have trouble reading a tape, it's probably best to use
\fBdd\fP(1) to copy it to disk and then use \*(Ml to process the disk
image.
Also, simply retrying \*(Ml will often clear an error condition, then
run to completion successfully, for no apparent reason.
.LP
The tape reading code is in \fBmulttape.c\fP, and it can actually
display quite a few different error messages.
Those, however, are usually the symptom of some problem with the program
itself (not being ported successfully), rather than an actual I/O error.
.\"
.SH
Notes on Conversion
.LP
Unpacking non-ASCII archives and mailboxes is quite expensive in CPU time.
It is better to reload these as \fB9bit\fP and selectively unpack them
later (that's why the \*(Ml defaults are set up that way).
.LP
Unpacking mailboxes and Forum meetings is generally much quicker into a
single large file than into many small files.
Which option is more appropriate depends on how the data is to be
processed once it has been reloaded.
.LP
There is no automatic conversion program for \*(Mx multi-segment files (MSFs).
For MSFs which are just stream output produced by \*(Mx \fLvfile_\fP,
the conversion can be accomplished easily using \fBcat\fP(1) to
concatenate the component files (WARNING: beware of MSFs with more than
9 components, because the numeric component names will not sort in the
correct order when the shell does starname expansion; large MSFs must
have their components explicitly named in the correct order).
Non-stream MSFs containing structured data may be converted by
special-purpose programs written using the subroutines in \*(Ml
(\fBmxforum\fP is an example of such a program).
.LP
If you need to write additional special-purpose conversion programs,
\fBmxmbx\fP is probably the simplest program to start from.
None of it is \fIreally\fP simple, though.
.\"
.SH
Notes on Using Disk Files
.LP
A \*(Mx segment (or MSF) can be created using \fLbackup_preattach\fP
as follows:
.DS
.ft L
backup_preattach output vfile_ \fIdump-file-name\fP
backup_dump \fIhierarchy-path\fP -debug
backup_preattach -detach
.ft R
.DE
This will create the \fIdump-file-name\fP in a form that \*(Ml can
interpret.  It will also create a backup map
(\fL!\fP\fIshriekname\fP\fL.backup.map\fP), which must have its bit
count explicitly adjusted because \*(Bd leaves it open.
An error file (\fIdate-time\fP\fL.ef\fP) may also be created if any
access errors occur while dumping.
The \fL-debug\fP option disables use of privilege, which is appropriate
for all unprivileged users.
.LP
Once created, the dump file can then be transferred to another system by
tape or serial transfer (such as Kermit in binary mode).
For either method, be sure not to introduce any unnecessary conversions,
padding, etc.
Once on the other system, it should be copied into a disk file which can
then be processed directly by \*(Ml.
.LP
If you use \fBdd\fP(1) to read a \*(Bd tape onto a \*(Ux
system, you must specify a large number for its
\fBfiles\fP parameter, since every 128 blocks on a \*(Bd
tape appears as a separate file on \*(Ux. Since there can be around
40,000 blocks on a single 6250 BPI tape, a \fBfiles\fP value of 400 is
probably appropriate.
.LP
In general, disk images of \*(Bd tapes will be easier (and faster) for
\*(Ml to process than the tapes themselves, and images of \*(Bd files
easier still.  If you're having trouble, try some of these alternative
transfer techniques.
.\"
.SH
Notes on Supported Systems
.LP
The \*(Ml package is written entirely in the C programming language,
and can easily be converted to run on most systems with a C compiler
and reasonable approximation to the C standard I/O library. 
Because the \*(Ux file system is relatively similar to the \*(Mx
file system, the \*(Ml package was originally designed for use on
\*(Ux systems. 
The standard distribution version runs on Sun Microsystems
Sun-3 systems running SunOS release 3.2 or later; SunOS is a variant
of the \*(Ux system derived from the Berkeley 4.2/4.3 BSD systems. 
.LP
In addition to SunOS support, the distributed source for the \*(Ml
package includes support for use on System\ V \*(Ux systems and
Microsoft \*(Md and \*(Pd systems (version 2.0 and later). 
The primary differences in \*(Ml's operation on these systems is the
handling of names: whereas SunOS (and all 4.2/4.3 BSD systems) allows
file names long enough for any \*(Mx file name to be converted
without truncation,
System\ V \*(Ux and \*(Md have limited filename length and syntax,
requiring conversion of \*(Mx names. 
.\"
.SH
Notes on Non-UNIX Versions
.LP
The \*(Md version of \*(Ml has worked in the past, though it has not
been tested recently.
It should be reasonably easy to compile, depending on your C compiler
and linker (of course, it's mostly useful for testing with dump tape
images, since not many \*(Md systems can read \(12-inch tapes).
It's actually pretty useful that way for quick-and-dirty copies from
\*(Mx to \*(Md, since it understands directory structure and file
transfer programs don't.
Just create a backup tape image on Multics (with
\fLbackup_preattach\fP), use something like Kermit to transfer it, and
use \*(Ml to unpack it.
.LP
A CMS version of \*(Ml has been created and run successfully, but CMS is
such a primitive operating system that many of \*(Ml's capabilities were
eliminated.  The standard CMS C\ compiler and library are particularly
difficult; the compiler requires escape sequences (in the source code)
for braces and other heavily-used characters, and the standard I/O
library functions don't come close to meeting the ANSI standard.
This is not a job for the faint of heart.
